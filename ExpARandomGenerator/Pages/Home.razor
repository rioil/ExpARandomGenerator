@page "/"

<PageTitle>Home</PageTitle>

<div class="text-left">
    <button class="btn btn-primary" @onclick="RegenerateData">Regenerate</button>

    <table class="table table-hover table-responsive w-auto text-center">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col" style="width: 60px">1</th>
                <th scope="col" style="width: 60px">2</th>
                <th scope="col" style="width: 60px">3</th>
                <th scope="col" style="width: 60px">4</th>
                <th scope="col" style="width: 60px">5</th>
                <th scope="col" style="width: 60px">6</th>
                <th scope="col" style="width: 60px">7</th>
                <th scope="col" style="width: 60px">8</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Data.Count; i++)
            {
                var digits = Data[i];
                <tr>
                    <th scope="col" class="align-middle">Data@(i + 1)</th>
                    @foreach (var digit in digits)
                    {
                        <td>
                            <div class="digit">
                                <div class="digit-num h2 mb-0">@digit.ToString("X1")</div>
                                @foreach (var bit in Convert.ToString(digit, 2).PadLeft(4, '0'))
                                {
                                    <svg class="digit-bit-indicator" width="10" height="10">
                                        <circle cx="5" cy="5" r="5"
                                                fill="@(bit == '1' ? "green" : "lightgray")" />
                                    </svg>
                                }
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private readonly byte[] _numbers = Enumerable.Range(0, 16).Select(x => (byte)x).ToArray();

    public IList<IList<byte>> Data { get; set; } = Array.Empty<byte[]>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RegenerateData();
    }

    private void RegenerateData()
    {
        Data = new byte[][] { GenerateRandomData(), GenerateRandomData() };
    }

    private byte[] GenerateRandomData()
    {
        const int Digits = 8;
        var data = _numbers.OrderBy(x => Random.Shared.Next())
                           .Take(Digits)
                           .ToArray();
        return data;
    }
}